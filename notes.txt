Used software:
	java version "1.8.0_40"
	Java(TM) SE Runtime Environment (build 1.8.0_40-b25)
	Java HotSpot(TM) 64-Bit Server VM (build 25.40-b25, mixed mode)

	Eclipse IDE for Java Developers Version: Luna Service Release 1a (4.4.1)
	
	Apache Maven 3.0.5

	git version 1.9.1


1. generate new maven project with help of howto
( http://www.mkyong.com/maven/how-to-create-a-java-project-with-maven/ )

	mvn archetype:generate -DgroupId=de.steinerix.ping_monitor -DartifactId=ping_monitor -DarchetypeArtifactId=maven-archetype-quickstart  -DinteractiveMode=false

	mvn eclipse:eclipse

2. initialize local git repo

	~/projects/ping_monitor$ git init
	Initialisierte leeres Git-Repository in /home/usr/projects/ping_monitor/.git/

3. import "Existing maven project" into eclipse workspace

4. change pom.xml to include JUnit 4.10

	mvn clean:eclipse
	mvn eclipse:eclipse
	restart eclipse
	make sure <scope>test</scope> is set for JUnit or any artifacts only used during test 

5. change pom.xml to inlude mail-api 1.52
	http://www.tutorialspoint.com/javamail_api/index.htm
	http://www.journaldev.com/2532/java-program-to-send-email-using-smtp-gmail-tls-ssl-attachment-image-example

	<dependency>
		<groupId>com.sun.mail</groupId>
		<artifactId>javax.mail</artifactId>
		<version>1.5.2</version>
	</dependency>


6. change pom.xml to copy ressource folders (src and test)
	<build>
		<resources>
			<resource>
				<directory>${project.basedir}/src/main/resources</directory>
			</resource>
		</resources>
		<testResources>
			<testResource>
				<directory>${project.basedir}/src/test/resources</directory>
			</testResource>
		</testResources>
	</build>

7. change pom.xml to compile src code > 1.3 (issue with ubuntu maven package)
http://stackoverflow.com/questions/7597950/maven-error-generics-are-not-supported-in-source-1-3-i-am-using-1-6	
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.2</version>
					<configuration>
						<source>1.8</source>
						<target>1.8</target>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

8. create github account
	-> create repo for project and push
		git push origin master
	-> create repo for maven repository

9. add icmp4j (build 1017) to pom.xml
	-> download file from project site.
	-> create a local repo directory for maven, init git and execute the command below: 
	 mvn install:install-file -DgroupId=org.icmp4j -DartifactId=icmp4j -Dversion=1017 -Dfile=/home/usr/projects/maven/icmp4j.jar -Dpackaging=jar -DgeneratePom=true -DlocalRepositoryPath=./repository 
	-> edit build.xml of ant script and import project to eclipse.
		-> generate icmp4-javadoc.jar
		-> generate icmp4-sources.jar
		-> copy generated jars to icmp4j.jar in repo folder
	-> commit and push repo
	-> add repo hosted on github to pom.xml 
		<repositories>
			<!-- maven repo on github for third party JARs -->
			<repository>
				<id>usrhub-thirdparty-repo</id>
				<url>https://raw.githubusercontent.com/usrhub/mvn-hub/master</url>
				<releases>
					<enabled>true</enabled>
				</releases>
				<snapshots>
					<enabled>false</enabled>
				</snapshots>
			</repository>
		</repositories>

	-> add icmp4j and its dependencies to pom.xml:
		<dependency>
			<groupId>org.icmp4j</groupId>
			<artifactId>icmp4j</artifactId>
			<version>1017</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>jna</artifactId>
			<version>3.5.1</version>
		</dependency>
		<dependency>
			<groupId>net.java.dev.jna</groupId>
			<artifactId>platform</artifactId>
			<version>3.5.1</version>
		</dependency>

	-> update eclipse project with maven:
		 mvn eclipse:eclipse -DdownloadSources=true  -DdownloadJavadocs=true
	
10. add blackholes/unreachables to routing:
	ip route add unreachable 192.168.2.1

	# blackhole all packets destined for 192.168.2.1
	ip route add blackhole 192.168.2.1
	# to delete the same route, replace add with del
	ip route del blackhole 192.168.2.1
